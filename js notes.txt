base execution context

global execution context:
* creates a global object
* creates the 'this' variable

global in js means code/variables not inside a function

This works by the said variables/functions created outside of functions get attached
to the global object 'this', which seems to default to refering to the 'window' object 
when run in a browser


Execution Context wraps the code that's being run such that the javascript engine may make inferences about how to and in what order things are run. 

Execution Context has 2 phases: 
1) Creation phase where Hoisting takes place
2) Execution phase where code is executed line by line 

Part of the Execution Context is an Outer Environment. Inside of functions, this refers 
to the global Execution Context. If function b is declared inside function a, a will be b's Outer Environment with the global Execution Context being a's. This Outer Environment depends on where the function sits lexically.

Another way of answering where/whom does the Outer Environment point to is to answer the question 'Who created me?'

Hoisting - the process of setting aside memory for function & variable declarations within the execution context. Variables used before being assigned a value will be defaulted to undefined. NOTE: This process does not physically move the variable/function declarations to the top of the file.

Note: never set variable values to undefined yourself otherwise you won't be able to track if a variable wasn't provided a value of undefined or if it's the value you set somewhere in the code.

var test = undefined;
console.log(test); //undefined
console.log(test == undefined); //true
console.log(test === undefined); //true
console.log(test == 'undefined'); //false
console.log(test === 'undefined'); //false


Single Threaded - one command is executed at a time 
Synchronous - one at a time & in order 

FUNCTION INVOCATION & THE EXECUTION STACK

Every function executed creates a new Execution Context and adds it to the Execution Stack. It's literally a stack structure: LAST IN FIRST OUT

VARIABLE ENVIRONMENT a.k.a SCOPE - refers to where the variables live / are available in code 

THE SCOPE CHAIN 

let - allows the js engine to use block scoping 

ASYNCHRONOUS - MORE THAN ONE AT A TIME

Outside of the JS Engine exists an Event Queue. Clicks, Http Requests, etc are added here. The JS engine will periodically check the Event Queue when the global execution context stack is empty. This process of checking the Event Queue is called the Event Loop.

In actuality, it's the browser that is asynchronous and not the js engine.

SECTION 3 - TYPES & OPERATORS

JS uses dynamic typing.

Primative type - type that represents a single value (not an object).
* undefined 
* number (floating point)
* string
* boolean
* null
* symbol - used in ES6. Not fully supported by all browsers.

OPERATORS - A special function that is syntactically (written) differently
INFIX notation - where the function name sits between the two operands

OPERATOR PRECEDENCE - which operator is called first when multiple are on the same line of code.
OPERATOR ASSOCIATIVITY - what order the operator gets called (left to right or right to left) when operators have the same precedence.

= operator's associativity is right to left.
var a = 2, b= 3, c = 4;
a = b = c;   //a & b & c are all equal to 4

Also note that the assignment b = c actually resolves by returning a value after assigning 
c's value to b & then returns the value of b, which is 4, so we then get a = 4;

a = b = c = 4; // c set to 4 & result returned
a = b = 4; // b set to 4 & result returned
a = 4; // a set to 4


COERCION: CONVERTING THE VALUE FROM ONE TYPE TO ANOTHER

var a = 1 + '2'; //prints 12

The === will not perform type coercion in comparisons and this is best practice.

See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness

CHECKING EXISTING WITH TYPE COERCION

var a;
a = null; // if(a) is false
a = undefined; // if(a) is false
a = 0; // if(a) is false


DEFAULT VALUES

Functions can be called w/o parameter values. If so, the parameters have their value set to undefined.

function greet(name) {
	name = name || '<Your name here>';  // provides default value b/c undefined resolves to false
	console.log('Hello ' + name);
}

greet('Tony');
greet();

SECTION 4 Functions & Objects


//Note using new Object() is not preferred.
var person = new Object();

person.lastname = "lastname";
person["firstname"]= "tony";

var firstNameProperty = "firstname";

person.address = new Object();
person.address.street = "111 main st.";
console.log(person);
console.log(person[firstNameProperty]);
console.log(person.firstname);

//Note using dot "." operator IS preferred.
console.log(person["address"]["street"]);

OBJECTS AND OBJECT LITERALS

// short hand for creating a new object
//OBJECT LITERAL SYNTAX
var tony = {
    firstname: 'Tony',
    lastname: 'Alicea',
    address: {
        street: '111 main st.',
        city: 'New York'
    }
};

function greet(person) {
    console.log('Hi ' + person.firstname);
}

greet(tony);

greet( {firstname: 'Jason', lastname: 'baisden'});

FAKING NAMESPACES

var greet = 'Hello';
var greet = 'Hola';

//prints Hola.
console.log(greet);

//fake namespace
var english = {};
var spanish = {};

english.greet = 'Hello';
spanish.greet = 'Hola!';

console.log(english);

JSON AND OBJECT LITERALS

All json is valid js object literal syntax 
Not all object literal syntax is valid json
use JSON.stringify(obj) to convert an object to a json string 
use JSON.parse(jsonString) to convert a json string to a js object 

var objectLiteral = {
    firstname: 'Mary',
    isAProgrammer: true
}

console.log(JSON.stringify(objectLiteral));

var jsonValue = (JSON.parse(JSON.stringify(objectLiteral)));

/*{
    "firstname": 'Mary',
    "isAProgrammer": true
}*/

console.log(objectLiteral);

FUNCTIONS ARE OBJECTS & first class citizens in js 

First class functions - everything you can do with other types you can do with functions.
You can attach primitives, objects, and even functions to functions. Functions even have a 
'Code' property that contains the actual code within the function. 

function greet(person) {
    console.log('Hi ' + person.firstname);
}
greet.language = 'english'; // sets property of the greet object which just happens to be a function
console.log(greet); //prints code of greet
console.log(greet.language);


FUNCTION STATEMENT AND FUNCTION EXPRESSIONS 

Expression - unit of code that results in a value.

Note - the following causes an error: 

anonymousGreet();

var anonymousGreet = function() {
    console.log('hi');
}

This is because anonymousGreet gets hoisted and initialized with undefined. Then the "()" tries to invoke
undefined, but undefined is not a function so it errors.

BY VALUE VS BY REFERENCE

* Primative values will be copied (by value)
* Object values will be stored as references (by reference)


// ALL PRIMATIVES ARE BY VALUE (EVEN FUNCTION PARAMETERS)
var a = 3;
var b = 4;
b = a;
a = 2;
console.log(b);
console.log(a);

// ALL OBJECTS ARE BY REFERENCE (EVEN FUNCTION PARAMETERS)

var c = { greeting: 'hi'};
var d;
d = c; //d now points to the same memory location as d
c.greeting = 'hello'; //mutate object in memory location pointed to by both c and d
console.log(c);
console.log(d);

OBJECTS, FUNCTIONS, 'this'

* Remember when a function is invoked, a new execution context is created and put onto the execution stack 

var c = {
    name: 'The c object',
    log: function() {
        console.log(this);
    }
}

c.log();

Here the 'this' keyword points to the object that contained the method where 
'this' was used rather than the global window object.

When the function invoke is a method of an object, the this keyword will point to the object; however, if another method is created inside the object method, the this keyword will point to 
the global object. This is f'd up for sure.

Solution: inside the object's primary method (the one assigned to a name), set 

var that/self = this; and use that/self in any children methods.

var c = {
    name: 'The c object',
    log: function() {
        var self = this;
        self.name = 'updated c object';
        console.log(this);

        var setname = function(newname) {
            self.name = newname;
        }

        setname('updated again! the c object');
        console.log(this);
    }
}

c.log();

ARRAYS & COLLECTIONS

* arrays can hold anything

'arguments' AND SPREAD

'arguments' contains an array like structure of all parameters passed to a function. 
It's array like because it doesn't exactly have all the features of an array.

function greet(firstname, lastname, language, ...other) {
    // console.log(arguments);
    console.log('----------------------------------');
    console.log(firstname);
    console.log(lastname);
    console.log(language);

    //other contains all remaining parameters passed in. It could just replace the
    //whole parameter list with other.
    console.log(other);
}

greet();
greet("jason");
greet("jason","baisden");
greet("jason","baisden", 'en', 'extra extra read all about it ');

FUNCTION OVERLOADING

Javascript doesn't have function overloading. This ties into the above section regarding
function arguments and how javascript handles them. See below for a pattern to mimic 
a sort of function overloading that's more succinct.

function greet(firstname, lastname, language, ...other) {
    language = language || 'en';
    if( language === 'en') {
        console.log('Hello ' + firstname + ' ' + lastname);
    }
        
    if( language === 'es') {
        console.log('Holla ' + firstname + ' ' + lastname);
    }
}

function greetEnglish(firstname, lastname) {
    greet(firstname, lastname, 'en');
}

function greetSpanish(firstname, lastname) {
    greet(firstname, lastname, 'es');
}

greetEnglish('jason','baisden');
greetSpanish('jason','baisden');

SYNTAX PARSERS

AUTOMATIC SEMI-COLON INSERTION

Exactly what it says. The JS engine will put ';' in code where it thinks they belong.

Moral: PUT YOUR OWN SEMI-COLONS on your lines. Never have a line with 'Return' and no 
continuation character like '{

WHITESPACE

Javascript allows liberal use of whitespace

IMMEDIATELY INVOKED FUNCTION EXPRESSIONS (IFFE)S

var greeting = function(name) {
     console.log('Hello' + name);
}('IIFE');

(function(name) {
    console.log('Hello' + name);
})();


IIFES AND SAFE CODE =

Lots of libraries will initialize their library via an IIFE because it won't collide 
against the global object or other libraries. If the global environment needs to be accessed,
it can be passed as a parameter to the IIFE. 

UNDERSTANDING CLOSURES

function greet(whattosay) {
    return function(name) {
        console.log(whattosay + ' ' + name);
    }
}

var sayHi = greet('hi');

//B/c of closures, when sayHi is invoked, the prior parameter 'hi' was kept
//in the variable scope. Also see note in lecture about this point. Good graphic to illustrate this.
sayHi('Jason');

UNDERSTANDING CLOSURE PART 2 

function buildFunctions() {
    var arr = [];

    for(var i = 0; i < 3; i++) {
        arr.push(
            //Note the function is not executed here. The loop will finish and i will be set to 3 when it does.
            function() {
                console.log(i);
            }
        )
    }

    return arr;
}

function buildFunctions2() {
    var arr = [];

    for(var i = 0; i < 3; i++) {
        //es6 'let' keyword scopes the value to the current execution block (curly braces)
        //so each time the loop is run a new variable is created in memory
        let j = i; 
        arr.push(
            //Note the function is not executed here. The loop will finish and i will be set to 3 when it does.
            function() {
                console.log(j);
            }
        )
    }

    return arr;
}

//How to do this prior to es6....with IIFE
function buildFunctions3() {
    var arr = [];

    for(var i = 0; i < 3; i++) {
        arr.push(
            (function(j) {
                return function() {
                    console.log(j);
                }
            }(i))
        )
    }

    return arr;
}


var fs = buildFunctions();
var fs2 = buildFunctions2();
var fs3 = buildFunctions3();

fs3[0](); // prints 0
fs3[1](); // prints 1 
fs3[2](); // prints 2 

fs[0](); // prints 3 
fs[1](); // prints 3 
fs[2](); // prints 3 


fs2[0](); // prints 0
fs2[1](); // prints 1
fs2[2](); // prints 2

FUNCTION FACTORIES 

Good graphic of function factories and using closures. The main function takes a 
parameter as a toggle to determine the functionality the closed 
in function will return. This closed in function takes it's own parameters.

CLOSURES AND CALLBACKS

Callback - function you give to another function to be executed when it's finsihed.

CALL, APPLY, BIND

bind - method available to functions. Returns a copy of the function with the 'this' keyword bound to the first
parameter passed such that when 'this' is used within the function, it will references the passed in object. 
The second paraemter can be an array of values to be passed as arguments to the function. The 'bind' keyword 
DOES NOT EXECUTE the function.

call - does much the same as the bind function where the 'this' keyword is bound to the first parameter. Multiple parameters
may be passed in separated by  commas. The difference here is that the function is executed outright.

apply - does the same as call, but the 2nd parameter must be an array

Function Currying - creating a copy of a function that has some default parameters.

see call_apply_bind.js

FUNCTIONAL PROGRAMMING 

FUNCTION PROGRAMMING PART 2 

These libraries are a good education in javascript in the real world. 

See annotated Underscore.js 

also lodash



OBJECT-ORIENTED JAVASCRIPT AND PROTOTYPAL INHERITANCE

CLASSICAL VS PROTOTYPAL INHERITANCE

INHERITANCE - one object gets access to the properties and methods of another object

classical refers to polymorphism and inheritance in a c# or java like sense
    * interfaces
    * abstract classes
    * etc, etc 

UNDERSTANDING THE PROTOTYPE 

great graphic describing the prototype chain, which refers to an object having a 
proto object which itself may have a proto object. Calling obj.prop1 will have 
the engine looking on obj for prop1 one. If it's not found, it will look on 
obj1's proto obj. If it's not found there, it will look on the proto obj of 
the proto obj. This will keep going down the chain until all proto objects 
have been searched or the property is found.


EVERYTHING IS AN OBJECT (OR A PRIMITIVE)


At the end of the __proto__ chain is always an object. It's through this __proto__
object that javascripot implements it's inheritance. Recall that call, apply, bind 
can be applied to all objects. They're implemented in javascripts base 'object' type.
Methods like push, pop, slice, etc of an array are implemented through this same object
__proto__ chain with the Array itself being an object that implements these methods. The same
goes for all actual types in javascript (number, string, null, undefined, boolean, etc)

NOTE: NICE PAGE WITH JS CHEATSHEETS https://blog.templatetoaster.com/javascript-cheat-sheet/

REFLECTION AND EXTEND

Reflection - an object can look at itself, listing and changing its properties
and methods.

Lesson reviewed how underscore.js has an _.extend(obj, obj2, obj3, etc) method
that will extend obj with all the properties and methods of the additional objects
passed into it. This highlighted the importance and strength of reflection in javascript.

basic reflection example: 

var person = {
    firstname: 'default',
    lastname: 'default',
    getfullName: function() {
        return this.firstname + ' ' + this.lastname;
    }
}

var john = {
    firstname: 'John',
    lastname: 'Doe'
}

// DON'T DO THIS EVER - FOR DEMO PURPOSES ONLY!
john.__proto__ = person;

for(var prop in john) {
    if(john.hasOwnProperty(prop)) {
        console.log(prop + ': ' + john[prop]);
    }
}

FUNCTION CONSTRUCTORS, 'new', & the history of Javascript

//Note research 'class' keyword 
function constructor - normal function used to construct objects 

function Person() {
    let bob = 'bob';
    this.firstname = "Jane";
    this.lastname = "Doe";
}

//the 'new' operator creates a new object and sets its __proto__.constructor
//value to the Person function
var john = new Person();

//this just makes a variable that points to the Person function object.
var notPerson = Person;

FUNCTION CONSTRUCTORS AND '.prototype'

Doing something like:

Person.prototype.getFullName = function() {
    return this.firstname + ' ' + this.lastname;
}

adds the getFullName method to not just the Person object,
but all instances of the Person object (yes, even already existing ones).

DANGEROUS ASIDE 'new' and functions

Note that function constructors are just functions. This means if you 
omit the 'new' keyword when declaring a new object, you'll run into issues
as the constructor itself doesn't return a value. This sets the variable
you just initialized to undefined.

var john = Person('John', 'Doe'); //john is undefined
console.log(john.firstname); //property 'firstname' doesn't exist on undefined

A good convention for function constructors is to Capitalize the first letter. Then
when you're reviewing the code, you'll be able spot anywhere the 'new' keyword might
be missing.

CONCEPTUAL ASIDE BUILT-IN FUNCTION CONSTRUCTORS

var a = new Number(3); //or new Number("3")
var s = new String("blah");

These statements don't return primatives; they return an object
that has a property, [[PrimitiveValue]] which is primitive. The object
__proto__ object points to String, which allows the object to inherit
Number or String methods.

also note that:

var a = Number; 
var a = String;

These return function objects.

Furthermore, this can be used to extend the methods on the based Javascript types
through use of something like String.prototype.<methodName> = <anonymous function>

DANGEROUS ASIDE - BUILT IN FUNCTION CONSTRUCTORS

var a = 3;
var b = new Number(3);
a == b // true
a === b //false ...a is a primitive, b is an object ...can't be equal

DANGEROUS ASIDE ARRAYS for..in

var arr = ['John', 'Jane', 'Jim'];

//Avoid iterating arrays like this
//indexes 0, 1, 2 are actually property names. 

Array.prototype.myAwesomeProperty = 'something more';

//so this loops over the array...and the property 'myAwesomeProperty'
for (var prop in arr) {
    console.log(prop + ': ' + arr[prop]);
}

OBJECT.create and PURE PROTOTYPAL INHERITANCE

Object.create creates an empty object with the __proto__
property set to the object passed to the create method.

var person = {
    firstname: 'Default',
    lastname: 'Default',
    greet: function() {
        return 'Hi ' + this.firstname;
    }
}

var john = Object.create(person);

//This will hide the property values on the prototype
john.firstname = 'John';
john.lastname = 'Doe';

console.log(john);

ES6 AND CLASSES 

google javascript's class keyword. At it's root, it's just syntactic
sugar, but best to know how it works.

SECTION 7

INITIALIZATION

'typeof', 'instanceof', FIGURING OUT WHAT SOMETHING IS

use typeof for primitive checks and instanceof for
checking against non-primitive

STRICT MODE 

LEARNING FROM OTHER'S GOOD CODE 

Try github --> explore --> see all --> front-end javascript frameworks

DEEP DIVE SOURCE CODE OF JQUERY 1...2...3

method chaining - calling one method after another, and each method affects
the parent object...pretty much a fluent api

jquery does this internally by returning 'this' on the methods
where this works, which i think is all of them.


